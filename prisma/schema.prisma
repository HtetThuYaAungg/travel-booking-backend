generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Status {
  ACTIVE
  INACTIVE
  PENDING
  APPROVED
  REJECTED
  DELETE
}

enum UserType {
  MAKER
  CHECKER
}

model User {
  id            String   @id @default(uuid())
  email         String
  staff_id      String
  role_id       String
  department_id String
  full_name     String
  password      String?
  user_type     UserType @default(MAKER)
  status        Status   @default(ACTIVE)
  
  // Google OAuth fields
  google_id     String?  @unique
  google_email  String?
  avatar_url    String?
  provider      String?  @default("local") // "local" or "google"

  role       Role       @relation("user_role", fields: [role_id], references: [id])
  department Department @relation("user_department", fields: [department_id], references: [id])

  created_by_id String?
  created_by    User?   @relation("user_created_by", fields: [created_by_id], references: [id])
  created_users User[]  @relation("user_created_by")

  updated_by_id String?
  updated_by    User?   @relation("user_updated_by", fields: [updated_by_id], references: [id])
  updated_users User[]  @relation("user_updated_by")

  deleted_by_id String?
  deleted_by    User?   @relation("user_deleted_by", fields: [deleted_by_id], references: [id])
  deleted_users User[]  @relation("user_deleted_by")

  created_roles Role[] @relation("role_created_by")
  updated_roles Role[] @relation("role_updated_by")
  deleted_roles Role[] @relation("role_deleted_by")

  created_permissions Permission[] @relation("permission_created_by")
  updated_permissions Permission[] @relation("permission_updated_by")
  deleted_permissions Permission[] @relation("permission_deleted_by")

  created_role_permissions RolePermission[] @relation("role_permission_created_by")
  updated_role_permissions RolePermission[] @relation("role_permission_updated_by")
  deleted_role_permissions RolePermission[] @relation("role_permission_deleted_by")

  created_departments Department[] @relation("department_created_by")
  updated_departments Department[] @relation("department_updated_by")
  deleted_departments Department[] @relation("department_deleted_by")

  created_hotels Hotel[] @relation("hotel_created_by")
  updated_hotels Hotel[] @relation("hotel_updated_by")
  deleted_hotels Hotel[] @relation("hotel_deleted_by")

  // Hotel booking relations
  hotel_bookings HotelBooking[] @relation("user_bookings")
  created_bookings HotelBooking[] @relation("booking_created_by")
  updated_bookings HotelBooking[] @relation("booking_updated_by")
  deleted_bookings HotelBooking[] @relation("booking_deleted_by")

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?
  @@unique([email, deleted_at], name: "unique_email_deleted")
  @@unique([staff_id, deleted_at], name: "unique_staff_id_deleted")
}

model Role {
  id          String @id @default(uuid())
  role_code   String
  role_name   String
  permissions Json
  status      Status @default(ACTIVE)

  users User[] @relation("user_role")

  role_permissions RolePermission[] @relation("role_to_role_permission")

  created_by_id String?
  created_by    User?   @relation("role_created_by", fields: [created_by_id], references: [id])

  updated_by_id String?
  updated_by    User?   @relation("role_updated_by", fields: [updated_by_id], references: [id])

  deleted_by_id String?
  deleted_by    User?   @relation("role_deleted_by", fields: [deleted_by_id], references: [id])

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?
  @@unique([role_code, deleted_at], name: "unique_role_code_deleted")
}

model Permission {
  id          String  @id @default(uuid())
  name        String  
  description String?
  module      String
  action      String
  status      Status  @default(ACTIVE)

  role_permissions RolePermission[] @relation("permission_to_role_permission")

  created_by_id String?
  created_by    User?   @relation("permission_created_by", fields: [created_by_id], references: [id])

  updated_by_id String?
  updated_by    User?   @relation("permission_updated_by", fields: [updated_by_id], references: [id])

  deleted_by_id String?
  deleted_by    User?   @relation("permission_deleted_by", fields: [deleted_by_id], references: [id])

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?
  @@unique([module, action, deleted_at], name: "unique_module_action_deleted")
}

model RolePermission {
  id            String @id @default(uuid())
  role_id       String
  permission_id String
  status        Status @default(ACTIVE)

  // Relations
  role       Role       @relation("role_to_role_permission", fields: [role_id], references: [id])
  permission Permission @relation("permission_to_role_permission", fields: [permission_id], references: [id])

  created_by_id String?
  created_by    User?   @relation("role_permission_created_by", fields: [created_by_id], references: [id])

  updated_by_id String?
  updated_by    User?   @relation("role_permission_updated_by", fields: [updated_by_id], references: [id])

  deleted_by_id String?
  deleted_by    User?   @relation("role_permission_deleted_by", fields: [deleted_by_id], references: [id])

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  @@unique([role_id, permission_id])
}

model Department {
  id              String @id @default(uuid())
  department_code String
  department_name String
  status          Status @default(ACTIVE)
  users User[] @relation("user_department")

  created_by_id String?
  created_by    User?   @relation("department_created_by", fields: [created_by_id], references: [id])

  updated_by_id String?
  updated_by    User?   @relation("department_updated_by", fields: [updated_by_id], references: [id])

  deleted_by_id String?
  deleted_by    User?   @relation("department_deleted_by", fields: [deleted_by_id], references: [id])

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?
  @@unique([department_code, deleted_at], name: "unique_department_code_deleted")
}

model Hotel {
  id          String @id @default(uuid())
  name        String
  description String
  location    String
  city        String
  country     String
  price       Float
  currency    String  @default("USD")
  rating      Int     @default(0)
  star_rating Int     @default(1)
  amenities   Json?   // Array of amenities like ["WiFi", "Pool", "Spa", "Gym"]
  images      Json?   // Array of image URLs
  status      Status  @default(ACTIVE)

  // Hotel features
  has_wifi        Boolean @default(false)
  has_pool        Boolean @default(false)
  has_spa         Boolean @default(false)
  has_gym         Boolean @default(false)
  has_restaurant  Boolean @default(false)
  has_parking     Boolean @default(false)
  has_pet_friendly Boolean @default(false)

  // Contact information
  phone    String?
  email    String?
  website  String?
  address  String?

  // Geolocation
  latitude  Float?
  longitude Float?

  created_by_id String?
  created_by    User?   @relation("hotel_created_by", fields: [created_by_id], references: [id])

  updated_by_id String?
  updated_by    User?   @relation("hotel_updated_by", fields: [updated_by_id], references: [id])

  deleted_by_id String?
  deleted_by    User?   @relation("hotel_deleted_by", fields: [deleted_by_id], references: [id])

  // Hotel booking relations
  bookings HotelBooking[] @relation("hotel_bookings")

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?
  @@unique([name, location, deleted_at], name: "unique_hotel_name_location_deleted")
}

model HotelBooking {
  id              String   @id @default(uuid())
  customer_name   String
  customer_email  String
  check_in_date   DateTime
  check_out_date  DateTime
  guests          Int      @default(1)
  rooms           Int      @default(1)
  special_requests String?
  status          Status   @default(PENDING)
  
  // Relations
  hotel_id        String
  hotel           Hotel    @relation("hotel_bookings", fields: [hotel_id], references: [id])
  
  user_id         String?
  user            User?    @relation("user_bookings", fields: [user_id], references: [id])
  
  created_by_id   String?
  created_by      User?    @relation("booking_created_by", fields: [created_by_id], references: [id])
  
  updated_by_id   String?
  updated_by      User?    @relation("booking_updated_by", fields: [updated_by_id], references: [id])
  
  deleted_by_id   String?
  deleted_by      User?    @relation("booking_deleted_by", fields: [deleted_by_id], references: [id])
  
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
  deleted_at      DateTime?
}
